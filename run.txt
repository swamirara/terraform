Terraform is a tool that is used for building, changing and versioning infrastructure safely and effectively. 
Written in Go by Hashicorp, Inital release on	July 28, 2014; 5 years ago

will cover

Setting up Docker Installing Terraform
Deploying Infrastructure with Terraform
Terraform Basics
Terraform Commands
HashiCorp Configuration Language
Tainting and Updating Resources
Terraform Console and Output
Input Variables
Breaking Out Our Variables and Outputs
Maps and Lookups
Terraform Workspaces
Null Resources and Local-exec





IaC -> Allows version control
Open Source and Enterprise

Uses high level syntax known as the hashicorp configuration language (HCL). 
This is what allows you to go and declare or define your infrastructure 
without having to learn all the different API between the different providers.

Idemopotent: This means that you can apply your scripts multiple times, but the result will 
always be the same if that configuration is already in place.

Supports multiple providers : AWS, GCP, Azure, Bluemix, VMware etc..

Cloud agnostic: Can create resources in multiple clouds, Hybrid clouds.


***Remebmer***

Terraform is responsible for deploying out high level infrastructure but is not responsible
for configuration management. This means you want to do something like Puppet, 
Chef Ansible or salt stack to handle your configuration 

*Terraform Main Concepts*
- Resource: something created by providers. Can be physical (VM, IP address) or logical (generated configuration file).
- Providers: creators of resources. Many providers are supplied by default such as VMWare, Amazon, Google, Azure, DigitalOcean, OpenStack.
- Provisioners: modifiers of resources such as command execution and file upload.

*The resource graph*
The resources must form a directed acyclic graph, meaning there is a start and end point for every path.
Terraform plans its execution based on this graph. Parallel paths can be executed together.



*Terraform commands*

terraform plan: Generates an execution plan for Terraform.

  This execution plan can be reviewed prior to running apply to get a
  sense for what Terraform will do. Optionally, the plan can be saved to
  a Terraform plan file, and apply can take this plan file to execute
  this plan exactly.
  
  like git status -> will show what's going to be added, modified or deleted.
  
terraform graph: to get a GraphViz data of the plan.
terraform show: to get the current state of the deployment.
terraform destroy: to remove all the created resources.


How does it work?

terraform apply reads all the *.tf files in the current directory.
It then constructs the graph of the resources and executes the providers/provisioners following this graph.
In case of error during the execution of a path, the resource is marked as tainted and the path is abandonned for the current run.
Subsequent terraform apply will pick up on the failed path(s) and try them again.
The deployment state is stored in .tfstate files.


Installing Terraform
sudo yum install wget unzip
wget https://releases.hashicorp.com/terraform/0.11.14/terraform_0.11.14_linux_amd64.zip
sudo unzip ./terraform_0.11.14_linux_amd64.zip -d /usr/local/bin/
PATH=/usr/local/bin:$PATH

terraform
Common commands:

apply: Builds or changes infrastructure
console: Interactive console for Terraform interpolations
destroy: Destroys Terraform-managed infrastructure
fmt: Rewrites configuration files to canonical format
get: Downloads and installs modules for the configuration
graph: Creates a visual graph of Terraform resources
import: Imports existing infrastructure into Terraform
init: Initializes a new or existing Terraform configuration
output: Reads an output from a state file
plan: Generates and shows an execution plan
providers: Prints a tree of the providers used in the configuration
push: Uploads this Terraform module to Terraform Enterprise to run
refresh: Updates local state file against real resources
show: Inspects Terraform state or plan
taint: Manually marks a resource for recreation
untaint: Manually unmarks a resource as tainted
validate: Validates the Terraform files
version: Prints the Terraform version
workspace: Workspace management

Set up the environment:

mkdir -p terraform/basics
cd terraform/basics
Create a Terraform script:

vi main.tf
main.tf contents:

# Download the latest Ghost image
resource "docker_image" "image_id" {
  name = "ghost:latest"
}
Initialize Terraform:

---># terraform init
Validate the Terraform file:

---># terraform validate
List providers in the folder:

---># ls .terraform/plugins/linux_amd64/
List providers used in the configuration:

---># terraform providers

Terraform Plan:

---># terraform plan
Useful flags for plan:
-out=path: Writes a plan file to the given path. This can be used as input to the "apply" command.
-var 'foo=bar': Set a variable in the Terraform configuration. This flag can be set multiple times.

Terraform Apply:

---># terraform apply
Useful flags for apply:
-auto-approve: This skips interactive approval of plan before applying.
-var 'foo=bar': This sets a variable in the Terraform configuration. It can be set multiple times.

Confirm your apply by typing yes. The apply will take a bit to complete.

List the Docker images:

---># docker image ls

Terraform Show:
terraform show

Terraform Destroy:
---># terraform destroy
Confirm your destroy by typing yes.

Useful flags for destroys:
-auto-approve: Skip interactive approval of plan before applying.

Re-list the Docker images:

---># docker image ls
Using a plan:

---># terraform plan -out=tfplan
Applying a plan:

---># terraform apply tfplan
Show the Docker Image resource:

---># terraform show
Destroy the resource once again:

---># terraform destroy


HCL --> Deploying a container using Terraform


# Download the latest Ghost image
resource "docker_image" "image_id" {
  name = "ghost:latest"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "ghost_blog"
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "2368"
    external = "80"
  }
}



****Taint :

--> terraform taint docker_container.container_id

See what will be changed:

--> terraform plan

--> terraform untaint docker_container.container_id

Verity that the resource is untainted:
--> terraform plan

****** Updating the continer port:

# Download the latest Ghost image
resource "docker_image" "image_id" {
  name = "ghost:latest"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "ghost_blog"
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "2368"
    external = "8081"
  }
}


*****Working with the Terraform console

--> terraform console

It is same as ipython console

--> docker_container.container_id.name
Type the following in the console to get the container's IP:

--> docker_container.container_id.ip_address




***** Output the name and IP of the Ghost blog container

# Download the latest Ghost Image
resource "docker_image" "image_id" {
  name = "ghost:latest"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "blog"
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "2368"
    external = "80"
  }
}

#Output the IP Address of the Container
output "ip_address" {
  value       = "${docker_container.container_id.ip_address}"
  description = "The IP for the container."
}

#Output the Name of the Container
output "container_name" {
  value       = "${docker_container.container_id.name}"
  description = "The name of the container."
}

Validate changes:

--> terraform validate
Apply changes to get output:

--> terraform apply

--> terraform destroy


**********VARIABLES*******

Syntax:

variable [NAME] {
  [OPTION] = "[VALUE]"
}

Arguments
Within the block body (between { }) is configuration for the variable, which accepts the following arguments:

type (Optional): If set, this defines the type of the variable. Valid values are string, list, and map.
default (Optional): This sets a default value for the variable. If no default is provided, Terraform will raise an error if a value is not provided by the caller.
description (Optional): A human-friendly description for the variable.

Using variables during an apply:

--> terraform apply -var 'foo=bar'

Set up the environment:

--> cd terraform/basics
Edit main.tf:

--> vi main.tf
main.tf contents:

#Define variables
variable "image_name" {
  description = "Image for container."
  default     = "ghost:latest"
}

variable "container_name" {
  description = "Name of the container."
  default     = "blog"
}

variable "int_port" {
  description = "Internal port for container."
  default     = "2368"
}

variable "ext_port" {
  description = "External port for container."
  default     = "80"
}

# Download the latest Ghost Image
resource "docker_image" "image_id" {
  name = "${var.image_name}"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "${var.container_name}"
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "${var.int_port}"
    external = "${var.ext_port}"
  }
}

#Output the IP Address of the Container
output "ip_address" {
  value       = "${docker_container.container_id.ip_address}"
  description = "The IP for the container."
}

output "container_name" {
  value       = "${docker_container.container_id.name}"
  description = "The name of the container."
}


Validate the changes:

--> terraform validate
Plan the changes:

--> terraform plan
Apply the changes using a variable:

--> terraform apply -var 'ext_port=8080'
Change the container name:

--> terraform apply -var 'container_name=ghost_blog' -var 'ext_port=8080'
Reset the environment:

--> terraform destroy -var 'ext_port=8080'
because there is no default value


*********Breaking Out Our Variables and Outputs
keept them in seperate files

Edit variables.tf:

--> vi variables.tf
variables.tf contents:

#Define variables
variable "container_name" {
  description = "Name of the container."
  default     = "blog"
}
variable "image_name" {
  description = "Image for container."
  default     = "ghost:latest"
}
variable "int_port" {
  description = "Internal port for container."
  default     = "2368"
}
variable "ext_port" {
  description = "External port for container."
  default     = "80"
}


Edit main.tf:

--> vi main.tf
main.tf contents:

# Download the latest Ghost Image
resource "docker_image" "image_id" {
  name = "${var.image_name}"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "${var.container_name}"
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "${var.int_port}"
    external = "${var.ext_port}"
  }
}

Edit outputs.tf:

--> vi outputs.tf
outputs.tf contents:

#Output the IP Address of the Container
output "ip_address" {
  value       = "${docker_container.container_id.ip_address}"
  description = "The IP for the container."
}

output "container_name" {
  value       = "${docker_container.container_id.name}"
  description = "The name of the container."
}

Validate the changes:

--> terraform validate

Plan the changes:
--> terraform plan -out=tfplan -var container_name=ghost_blog

Apply the changes:
--> terraform apply tfplan

Destroy deployment:
--> terraform destroy -auto-approve -var container_name=ghost_blog



******* MAPS and LOOKUPs****
--> cd maps 

Plan the dev deploy:
--> terraform plan -out=tfdev_plan -var env=dev

Apply the dev plan:
--> terraform apply tfdev_plan

Plan the prod deploy:
--> terraform plan -out=tfprod_plan -var env=prod

Apply the prod plan:
--> terraform apply tfprod_plan

Destroy prod deployment:
--> terraform destroy -var env=prod -auto-approve

Use environment variables:

export TF_VAR_env=prod

Open the Terraform console:

--> terraform console

Execute a lookup:
--> lookup(var.ext_port, var.env)

Exit the console: control +c

--> unset TF_VAR_env



******* Creating a workspace
Terraform commands:

workspace: New, list, select and delete Terraform workspaces



Workspace subcommands:

delete: Delete a workspace list: List Workspaces 
new: Create a new workspace 
select: Select a workspace 
show: Show the name of the current workspace


Setup the environment:

--> cd terraform/basics

Create a dev workspace:
--> terraform workspace new dev

Plan the dev deployment:
--> terraform plan -out=tfdev_plan -var env=dev

Apply the dev deployment:
--> terraform apply tfdev_plan

Change workspaces:
--> terraform workspace new prod

Plan the prod deployment:
--> terraform plan -out=tfprod_plan -var env=prod

Apply the prod deployment:
--> terraform apply tfprod_plan

Select the default workspace:
--> terraform workspace select default

Find what workspace we are using:
--> terraform workspace show

Select the dev workspace:
--> terraform workspace select dev

Destroy the dev deployment:
--> terraform destroy -var env=dev

Select the prod workspace:
--> terraform workspace select prod

Destroy the prod deployment:
--> terraform destroy -var env=prod


***** NULL resources and locl-exec

Setup the environment:

--> cd terraform/basics

main.tf contents:

# Download the latest Ghost Image
resource "docker_image" "image_id" {
  name = "${lookup(var.image_name, var.env)}"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "${lookup(var.container_name, var.env)}"
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "${var.int_port}"
    external = "${lookup(var.ext_port, var.env)}"
  }
}

resource "null_resource" "null_id" {
  provisioner "local-exec" {
    command = "echo ${docker_container.container_id.name}:${docker_container.container_id.ip_address} >> container.txt"
  }
}
Reinitialize Terraform:

--> terraform init
Validate the changes:

--> terraform validate
Plan the changes:

--> terraform plan -out=tfplan -var env=dev
Apply the changes:

--> terraform apply tfplan
View the contents of container.txt:

--> cat container.txt
Destroy the deployment:

--> terraform destroy -auto-approve -var env=dev
